<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.sist.user.mapper.review.ReviewMapper">

  <select id="selectReviewScreenOutput" parameterType="String" resultType="kr.co.sist.user.vo.review.ReviewVO">
    -- 리뷰 화면 출력
    WITH SurveyStats AS (
        SELECT
            RS.COMPANY_CODE AS companyCode,
            CI.COMPANY_NAME AS companyName,
            COUNT(RS.SURVEY_NUM) AS totalSurveys,
            AVG(CASE RS.QUESTION1 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion1,
            AVG(CASE RS.QUESTION2 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion2,
            AVG(CASE RS.QUESTION3 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion3,
            AVG(CASE RS.QUESTION4 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion4
        FROM
            REVIEW_SURVEY RS
        JOIN
            COMPANYINFO CI ON RS.COMPANY_CODE = CI.COMPANY_CODE
        WHERE
            RS.COMPANY_CODE = #{companyCode} -- 여기에 특정 기업 코드를 입력합니다.
        GROUP BY
            RS.COMPANY_CODE,
            CI.COMPANY_NAME
    )
    SELECT
        S.companyCode,
        S.companyName,
        S.totalSurveys,
        S.avgQuestion1,
        S.avgQuestion2,
        S.avgQuestion3,
        S.avgQuestion4,
        R.REVIEW_NUM AS reviewNum, -- reviewNum 추가
        R.TITLE AS title,
        R.CONTENT AS content,
        R.USER_ID AS userId,
        R.INPUT_DATE AS inputDate,
        R.RECOMMEND AS recommend
    FROM
        SurveyStats S
    LEFT JOIN
        REVIEW R ON S.companyCode = R.COMPANY_CODE
    ORDER BY
        R.INPUT_DATE DESC
</select>

<!-- 페이지 네이션 -->
  <select id="selectReviewScreenOutputWithPagination" parameterType="map" resultType="kr.co.sist.user.vo.review.ReviewVO">
    -- 리뷰 화면 출력 (페이지네이션 포함)
    WITH SurveyStats AS (
        SELECT
            RS.COMPANY_CODE AS companyCode,
            CI.COMPANY_NAME AS companyName,
            COUNT(RS.SURVEY_NUM) AS totalSurveys,
            AVG(CASE RS.QUESTION1 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion1,
            AVG(CASE RS.QUESTION2 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion2,
            AVG(CASE RS.QUESTION3 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion3,
            AVG(CASE RS.QUESTION4 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END) AS avgQuestion4
        FROM
            REVIEW_SURVEY RS
        JOIN
            COMPANYINFO CI ON RS.COMPANY_CODE = CI.COMPANY_CODE
        WHERE
            RS.COMPANY_CODE = #{companyCode}
        GROUP BY
            RS.COMPANY_CODE,
            CI.COMPANY_NAME
    )
    SELECT
        S.companyCode,
        S.companyName,
        S.totalSurveys,
        S.avgQuestion1,
        S.avgQuestion2,
        S.avgQuestion3,
        S.avgQuestion4,
        R.REVIEW_NUM AS reviewNum,
        R.TITLE AS title,
        R.CONTENT AS content,
        R.USER_ID AS userId,
        R.INPUT_DATE AS inputDate,
        R.RECOMMEND AS recommend
    FROM
        SurveyStats S
    LEFT JOIN
        REVIEW R ON S.companyCode = R.COMPANY_CODE
    ORDER BY
        R.INPUT_DATE DESC
    OFFSET #{offset} ROWS FETCH NEXT 3 ROWS ONLY
  </select>

  

  <insert id="insertReviewSurvey" parameterType="kr.co.sist.user.domain.review.ReviewSurveyDomain">
    -- 리뷰 설문
      INSERT INTO REVIEW_SURVEY (SURVEY_NUM, REVIEW_NUM, USER_ID, COMPANY_CODE, QUESTION1, QUESTION2, QUESTION3, QUESTION4)
    VALUES (REVIEW_SURVEY_SEQ.NEXTVAL, #{reviewNum}, #{userId}, #{companyCode}, #{question1}, #{question2}, #{question3}, #{question4})
  </insert>
  
 <!-- 리뷰 추천 -->
<update id="updateRecommend" parameterType="kr.co.sist.user.vo.review.RecommendVO">
    UPDATE REVIEW
    SET RECOMMEND = RECOMMEND + 1
    WHERE REVIEW_NUM = #{reviewNum}
</update>

<!-- 추천 기록 추가 -->
<insert id="insertReviewRecommend" parameterType="kr.co.sist.user.vo.review.RecommendVO">
    INSERT INTO REVIEW_RECOMMEND (USER_ID, REVIEW_NUM)
    VALUES (#{userId}, #{reviewNum})
</insert>

<!-- 이미 추천했는지 확인 -->
<select id="checkIfRecommended" parameterType="kr.co.sist.user.vo.review.RecommendVO" resultType="int">
    SELECT COUNT(*)
    FROM REVIEW_RECOMMEND
    WHERE USER_ID = #{userId}
      AND REVIEW_NUM = #{reviewNum}
</select>

<!-- 특정 리뷰의 질문들 가져오기 -->
  <select id="selectReviewQuestions" parameterType="int" resultType="kr.co.sist.user.vo.review.ReviewQuestionsVO">
     SELECT
        CASE RS.QUESTION1 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END AS question1,
        CASE RS.QUESTION2 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END AS question2,
        CASE RS.QUESTION3 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END AS question3,
        CASE RS.QUESTION4 WHEN 2 THEN 5 WHEN 1 THEN 2.5 ELSE 0 END AS question4
    FROM (
        SELECT DISTINCT
            REVIEW_NUM,
            QUESTION1,
            QUESTION2,
            QUESTION3,
            QUESTION4
        FROM
            REVIEW_SURVEY
        WHERE
            REVIEW_NUM = #{reviewNum}
    ) RS
    WHERE ROWNUM = 1
  </select>
  
  
  
<resultMap id="companyInfoResultMap" type="CompanyInfoVO">
    <result property="companyCode" column="COMPANY_CODE"/>
    <result property="companyName" column="COMPANY_NAME"/>
    <result property="companyImg" column="COMPANY_IMG"/>
</resultMap>

<select id="selectCompanyInfo" parameterType="String" resultMap="companyInfoResultMap">
    SELECT
        CI.COMPANY_CODE,  -- 회사 코드
        CI.COMPANY_NAME,  -- 회사 이름
        CI.COMPANY_IMG    -- 회사 이미지
    FROM
        COMPANYINFO CI
    WHERE
        CI.COMPANY_CODE = #{companyCode}  -- 특정 회사 코드를 조건으로 사용
</select>

<!-- 리뷰 작성 -->
<insert id="insertReview" parameterType="kr.co.sist.user.domain.review.ReviewDomain">
    -- 리뷰 작성
    INSERT INTO REVIEW (
        REVIEW_NUM, COMPANY_CODE, USER_ID, TITLE, CONTENT, INPUT_DATE, RECOMMEND, DELETE_FLAG
    ) VALUES (
        REVIEW_SEQ.NEXTVAL, -- 리뷰 번호는 시퀀스를 통해 자동 증가
        #{companyCode}, -- 기업 코드 (화면에서 입력받은 값)
        #{userId}, -- 사용자 ID (화면에서 입력받은 값)
        #{title}, -- 리뷰 제목 (화면에서 입력받은 값)
        #{content}, -- 리뷰 내용 (화면에서 입력받은 값)
        SYSDATE, -- 작성일은 현재 날짜로 설정
        0, -- 추천수 초기값은 0
        'N' -- 삭제 플래그 초기값은 'N'
    )
  </insert>  
  
  
  <!--  admin -->
  
  <!-- ID 검색 -->
  <select id="searchReviewById" parameterType="String" resultType="map">
    SELECT
        REVIEW_NUM AS 번호,
        USER_ID AS 아이디,
        (SELECT NAME FROM USERS WHERE USER_ID = REVIEW.USER_ID) AS 작성자,
        TITLE AS 제목,
        INPUT_DATE AS 작성일,
        RECOMMEND AS 추천수,
        CASE
            WHEN DELETE_FLAG = 'Y' THEN 'Yes'
            ELSE 'No'
        END AS 삭제여부
    FROM
        REVIEW
    WHERE
        USER_ID = #{userId}
  </select>

  <!-- 이름 검색 -->
  <select id="searchReviewByName" parameterType="String" resultType="map">
    SELECT
        REVIEW.REVIEW_NUM AS 번호,
        REVIEW.USER_ID AS 아이디,
        USERS.NAME AS 작성자,
        REVIEW.TITLE AS 제목,
        REVIEW.INPUT_DATE AS 작성일,
        REVIEW.RECOMMEND AS 추천수,
        CASE
            WHEN REVIEW.DELETE_FLAG = 'Y' THEN 'Yes'
            ELSE 'No'
        END AS 삭제여부
    FROM
        REVIEW
    JOIN
        USERS ON REVIEW.USER_ID = USERS.USER_ID
    WHERE
        USERS.NAME = #{name}
  </select>

  <!-- 제목 또는 내용 검색 -->
  <select id="searchReviewByTitleOrContent" parameterType="String" resultType="map">
    SELECT
        REVIEW.REVIEW_NUM AS 번호,
        REVIEW.USER_ID AS 아이디,
        USERS.NAME AS 작성자,
        REVIEW.TITLE AS 제목,
        REVIEW.CONTENT AS 내용,
        REVIEW.INPUT_DATE AS 작성일,
        REVIEW.RECOMMEND AS 추천수,
        CASE
            WHEN REVIEW.DELETE_FLAG = 'Y' THEN 'Yes'
            ELSE 'No'
        END AS 삭제여부
    FROM
        REVIEW
    JOIN
        USERS ON REVIEW.USER_ID = USERS.USER_ID
    WHERE
        USERS.NAME LIKE '%' || #{keyword} || '%'
        OR REVIEW.CONTENT LIKE '%' || #{keyword} || '%'
  </select>

  <!-- 리뷰 업데이트 위한 조회 -->
  <select id="getReviewDetailsForUpdate" parameterType="int" resultType="map">
    SELECT
        R.TITLE AS title,
        R.CONTENT AS content,
        C.COMPANY_NAME AS companyName,
        C.LOGO AS logo
    FROM
        REVIEW R
    JOIN
        COMPANYINFO C ON R.COMPANY_CODE = C.COMPANY_CODE
    WHERE
        R.REVIEW_NUM = #{reviewNum}
  </select>

  <!-- 리뷰 업데이트 -->
  <update id="updateReview" parameterType="map">
    UPDATE REVIEW
    SET 
        TITLE = #{title},
        CONTENT = #{content},
        INPUT_DATE = SYSDATE
    WHERE 
        REVIEW_NUM = #{reviewNum}
  </update>

  <!-- 리뷰 삭제 -->
  <delete id="deleteReview" parameterType="int">
    DELETE FROM REVIEW
    WHERE REVIEW_NUM = #{reviewNum}
  </delete>
</mapper>
